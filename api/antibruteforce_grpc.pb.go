// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: antibruteforce.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AntiBruteforce_Check_FullMethodName               = "/antibruteforce.AntiBruteforce/Check"
	AntiBruteforce_Reset_FullMethodName               = "/antibruteforce.AntiBruteforce/Reset"
	AntiBruteforce_AddToBlacklist_FullMethodName      = "/antibruteforce.AntiBruteforce/AddToBlacklist"
	AntiBruteforce_RemoveFromBlacklist_FullMethodName = "/antibruteforce.AntiBruteforce/RemoveFromBlacklist"
	AntiBruteforce_AddToWhitelist_FullMethodName      = "/antibruteforce.AntiBruteforce/AddToWhitelist"
	AntiBruteforce_RemoveFromWhitelist_FullMethodName = "/antibruteforce.AntiBruteforce/RemoveFromWhitelist"
)

// AntiBruteforceClient is the client API for AntiBruteforce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteforceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToBlacklist(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFromBlacklist(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToWhitelist(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveFromWhitelist(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type antiBruteforceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteforceClient(cc grpc.ClientConnInterface) AntiBruteforceClient {
	return &antiBruteforceClient{cc}
}

func (c *antiBruteforceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, AntiBruteforce_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteforce_Reset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AddToBlacklist(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteforce_AddToBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) RemoveFromBlacklist(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteforce_RemoveFromBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AddToWhitelist(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteforce_AddToWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) RemoveFromWhitelist(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteforce_RemoveFromWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteforceServer is the server API for AntiBruteforce service.
// All implementations must embed UnimplementedAntiBruteforceServer
// for forward compatibility.
type AntiBruteforceServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	Reset(context.Context, *ResetRequest) (*emptypb.Empty, error)
	AddToBlacklist(context.Context, *NetworkRequest) (*emptypb.Empty, error)
	RemoveFromBlacklist(context.Context, *NetworkRequest) (*emptypb.Empty, error)
	AddToWhitelist(context.Context, *NetworkRequest) (*emptypb.Empty, error)
	RemoveFromWhitelist(context.Context, *NetworkRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAntiBruteforceServer()
}

// UnimplementedAntiBruteforceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAntiBruteforceServer struct{}

func (UnimplementedAntiBruteforceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedAntiBruteforceServer) Reset(context.Context, *ResetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedAntiBruteforceServer) AddToBlacklist(context.Context, *NetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedAntiBruteforceServer) RemoveFromBlacklist(context.Context, *NetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlacklist not implemented")
}
func (UnimplementedAntiBruteforceServer) AddToWhitelist(context.Context, *NetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedAntiBruteforceServer) RemoveFromWhitelist(context.Context, *NetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhitelist not implemented")
}
func (UnimplementedAntiBruteforceServer) mustEmbedUnimplementedAntiBruteforceServer() {}
func (UnimplementedAntiBruteforceServer) testEmbeddedByValue()                        {}

// UnsafeAntiBruteforceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteforceServer will
// result in compilation errors.
type UnsafeAntiBruteforceServer interface {
	mustEmbedUnimplementedAntiBruteforceServer()
}

func RegisterAntiBruteforceServer(s grpc.ServiceRegistrar, srv AntiBruteforceServer) {
	// If the following call pancis, it indicates UnimplementedAntiBruteforceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AntiBruteforce_ServiceDesc, srv)
}

func _AntiBruteforce_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforce_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforce_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforce_AddToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AddToBlacklist(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_RemoveFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).RemoveFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforce_RemoveFromBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).RemoveFromBlacklist(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforce_AddToWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AddToWhitelist(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_RemoveFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).RemoveFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteforce_RemoveFromWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).RemoveFromWhitelist(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteforce_ServiceDesc is the grpc.ServiceDesc for AntiBruteforce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteforce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antibruteforce.AntiBruteforce",
	HandlerType: (*AntiBruteforceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _AntiBruteforce_Check_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _AntiBruteforce_Reset_Handler,
		},
		{
			MethodName: "AddToBlacklist",
			Handler:    _AntiBruteforce_AddToBlacklist_Handler,
		},
		{
			MethodName: "RemoveFromBlacklist",
			Handler:    _AntiBruteforce_RemoveFromBlacklist_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _AntiBruteforce_AddToWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromWhitelist",
			Handler:    _AntiBruteforce_RemoveFromWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antibruteforce.proto",
}
